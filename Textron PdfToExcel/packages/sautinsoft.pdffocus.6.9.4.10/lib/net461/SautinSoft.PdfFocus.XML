<?xml version="1.0"?>
<doc>
  <assembly>
    <name>SautinSoft.PdfFocus</name>
  </assembly>
  <members>
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ChannelDefinitionMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ChannelDefinitionMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ChannelDefinitionMapper.getFixedPoint(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ColorSpaceMapper.getFixedPoint(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ColorSpaceMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.ColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.EnumeratedColorSpaceMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.EnumeratedColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.EsRgbColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.ToString" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.PalettizedColorSpaceMapper.getCompImgHeight(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.Resampler.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.Resampler.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.SYccColorSpaceMapper.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Color.SYccColorSpaceMapper.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Icc.ICCProfiler.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.Icc.ICCProfiler.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.Icc.Tags.ICCTag" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.codestream.ProgressionType" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.codestream.reader.PktDecoder.ttIncl" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.codestream.writer.BitOutputBuffer" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.codestream.writer.BitOutputBuffer.Length" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.codestream.writer.BitOutputBuffer.Buffer" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.BitOutputBuffer.writeBit(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.BitOutputBuffer.writeBits(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.CodestreamWriter.writePacketHead(System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.codestream.writer.FileCodestreamWriter" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.FileCodestreamWriter.writePacketHead(System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.codestream.writer.FileCodestreamWriter.writePacketBody(System.Byte[],System.Int32,System.Boolean,System.Boolean,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.codestream.writer.PktEncoder.prevtIdxs" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.entropy.CBlkSizeSpec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.CBlkSizeSpec.getCBlkWidth(System.Byte,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.entropy.decoder.EntropyDecoder" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.EntropyDecoder.getSynSubbandTree(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.MQDecoder.fastDecodeSymbols(System.Int32[],System.Int32,System.UInt32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.MQDecoder.decodeSymbols(System.Int32[],System.Int32[],System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.MQDecoder.decodeSymbol(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.MQDecoder.init" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.state" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.getCodeBlock(System.Int32,System.Int32,System.Int32,CSJ2K.j2k.wavelet.synthesis.SubbandSyn,CSJ2K.j2k.image.DataBlk)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.magRefPass(CSJ2K.j2k.image.DataBlk,CSJ2K.j2k.entropy.decoder.MQDecoder,System.Int32,System.Int32[],System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.rawMagRefPass(CSJ2K.j2k.image.DataBlk,CSJ2K.j2k.entropy.decoder.ByteToBitInput,System.Int32,System.Int32[],System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.decoder.StdEntropyDecoder.cleanuppass(CSJ2K.j2k.image.DataBlk,CSJ2K.j2k.entropy.decoder.MQDecoder,System.Int32,System.Int32[],System.Int32[],System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.encoder.EBCOTRateAllocator.getAllCodeBlocks" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.encoder.EntropyCoder.isReversible(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.entropy.encoder.MQCoder" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.entropy.encoder.MQCoder.fastCodeSymbols(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.entropy.PrecinctSizeSpec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.fileformat.reader.FileFormatReader.readJP2HeaderBox(System.Int64,System.Int32,System.Int64)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.fileformat.reader.FileFormatReader.readContiguousCodeStreamBox(System.Int64,System.Int32,System.Int64)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.BlkImgDataSrc" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.BlkImgDataSrc.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.BlkImgDataSrc.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgData.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataAdapter.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataConverter.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataConverter.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataJoiner.#ctor(CSJ2K.j2k.image.BlkImgDataSrc[],System.Int32[])" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataJoiner.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataJoiner.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.ImgDataJoiner.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.input.ImgReaderPGM" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGM.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGM.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGM.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.input.ImgReaderPGX" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGX.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGX.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPGX.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.input.ImgReaderPPM" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPPM.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPPM.getInternCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.input.ImgReaderPPM.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.getFixedPoint(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.getCompData(CSJ2K.j2k.image.DataBlk,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.setTile(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.invcomptransf.InvCompTransf.nextTile" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.output.ImgWriterPGM" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.output.ImgWriterPGM.#ctor(System.String,CSJ2K.j2k.image.BlkImgDataSrc,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.output.ImgWriterPGX" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.output.ImgWriterPGX.#ctor(System.String,CSJ2K.j2k.image.BlkImgDataSrc,System.Int32,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.image.output.ImgWriterPPM" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.output.ImgWriterPPM.write" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.output.ImgWriterPPM.writeHeaderInfo" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.image.Tiler.#ctor(CSJ2K.j2k.image.BlkImgDataSrc,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.io.BinaryDataOutput" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.io.BinaryDataOutput.writeByte(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.io.BinaryDataOutput.writeShort(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.io.BufferedRandomAccessFile" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.io.BufferedRandomAccessFile.writeByte(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.io.EndianType_Fields" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.JJ2KExceptionHandler" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.JJ2KExceptionHandler.handleException(System.Exception)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.ModuleSpec.parseIdx(System.String,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.NotImplementedError" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.NotImplementedError.#ctor" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.quantization.dequantizer.CBlkQuantDataSrcDec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.dequantizer.Dequantizer.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.dequantizer.Dequantizer.getSynSubbandTree(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.dequantizer.Dequantizer.setTile(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.dequantizer.Dequantizer.nextTile" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.quantization.dequantizer.StdDequantizerParams.exp" -->
    <!-- Badly formed XML comment ignored for member "F:CSJ2K.j2k.quantization.dequantizer.StdDequantizerParams.nStep" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.quantization.QuantizationType_Fields" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.quantization.quantizer.Quantizer.getAnSubbandTree(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.quantization.QuantTypeSpec" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.roi.encoder.ArbROIMaskGenerator" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.roi.encoder.ArbROIMaskGenerator.getROIMask(CSJ2K.j2k.image.DataBlkInt,CSJ2K.j2k.wavelet.Subband,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.roi.encoder.ArbROIMaskGenerator.makeMask(CSJ2K.j2k.wavelet.Subband,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.roi.encoder.RectROIMaskGenerator" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.roi.encoder.RectROIMaskGenerator.getROIMask(CSJ2K.j2k.image.DataBlkInt,CSJ2K.j2k.wavelet.Subband,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.roi.encoder.ROIMaskGenerator" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.roi.encoder.ROIScaler" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.roi.ROIDeScaler.getSynSubbandTree(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.StringSpec.#ctor(System.Int32,System.Int32,System.Byte,System.String,System.String[],CSJ2K.j2k.util.ParameterList)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.util.FacilityManager" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.util.ISRandomAccessIO" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.util.MsgLogger_Fields" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.MsgPrinter.nextLineEnd(System.String,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.MsgPrinter.nextWord(System.String,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ParameterList.parseArgs(System.String[])" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.util.ThreadPool" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.ThreadPoolThread.Run" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.#ctor(System.Int32,System.Int32,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.runTarget(IThreadRunnable,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.runTarget(IThreadRunnable,System.Object,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.clearTargetErrors" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.putInIdleList(CSJ2K.j2k.util.ThreadPool.ThreadPoolThread)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.util.ThreadPool.getIdle(System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloat" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.SynLowNegSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.SynLowPosSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.SynHighNegSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.SynHighPosSupport" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.analyze_lpf(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.analyze_hpf(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.getLPSynthesisFilter" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.getHPSynthesisFilter" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.isSameAsFullWT(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterFloatLift9x7.Equals(System.Object)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.analysis.AnWTFilterInt" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterIntLift5x3.analyze_hpf(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterSpec.getHFilters(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.analysis.AnWTFilterSpec.getVFilters(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.CBlkWTDataSrcDec.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.InvWTFull.getNomRangeBits(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.MultiResImgDataAdapter.getCompImgHeight(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.synthesis.SynWTFilter" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloat" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.SynLowNegSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.SynLowPosSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.SynHighNegSupport" -->
    <!-- Badly formed XML comment ignored for member "P:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.SynHighPosSupport" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.synthetize_lpf(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.synthetize_hpf(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.synthesis.SynWTFilterFloatLift9x7.isSameAsFullWT(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.synthesis.SynWTFilterInt" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.WTDecompSpec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTDecompSpec.#ctor(System.Int32,System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTDecompSpec.getDecSpecType(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTDecompSpec.getDecompType(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTDecompSpec.getLevels(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:CSJ2K.j2k.wavelet.WTFilterSpec" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTFilterSpec.#ctor(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:CSJ2K.j2k.wavelet.WTFilterSpec.getKerSpecType(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "T:jj2000.j2k.util.NativeServices" -->
    <!-- Badly formed XML comment ignored for member "P:jj2000.j2k.util.NativeServices.ThreadConcurrency" -->
    <!-- Badly formed XML comment ignored for member "M:SupportClass.Tokenizer.MoveNext" -->
    <member name="T:SautinSoft.PdfFocus">
      <summary>
            PDF Focus .Net is designed to convert PDF documents
            </summary>
      <remarks>
        <p>PDF Focus .Net is designed to help you in development of applications where is necessary to convert any PDF documents. Let's see what the component can do for you:</p>
        <br />
        <ul>
          <li>Convert PDF to Word, DOCX, RTF with tables, images, full text formtatting</li>
          <li>Convert PDF to Text</li>
          <li>Convert PDF to HTML with full text formtatting, images, CSS</li>
          <li>Convert PDF to Excel workbooks</li>
          <li>Convert PDF to Images: Jpeg, Png, Bmp, Tiff, Multipage-Tiff, System.Drawing.Image.</li>
          <li>Convert PDF to XML workbooks</li>
          <li>Extract images from PDF</li>
          <li>Get the number of pages in PDF and their sizes</li>
          <li>Convert only a specific page or diapason of pages from a PDF document</li>
          <li>Manipulate with PDF documents as files, streams, urls</li>
          <li>Works in Medium Trust level and shared hosting</li>
          <li>Has only the one requirement: .Net platform 4.0 or higher.</li>
        </ul>
        <br />
        <p>To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.</p>
        <br />
        <img src="../Overview/pictures/pdffocus-scheme.png" />
        <br />
        <br />
        <strong>Supported PDF documents:<br /><br /></strong>
        <div>   PDF Focus.Net can operate with any types of PDF documents generated by Adobe software and other third party applications.</div>
        <ul>
          <li>PDF 1.0</li>
          <li>PDF 1.1</li>
          <li>PDF 1.2</li>
          <li>PDF 1.3</li>
          <li>PDF 1.4, PDF/A</li>
          <li>PDF 1.5</li>
          <li>PDF 1.6</li>
          <li>PDF 1.7<br /></li>
        </ul>
      </remarks>
    </member>
    <member name="T:SautinSoft.PdfFocus.CWordOptions">
      <summary>
            Allows to specify various properties for Word document: format (Docx or Rtf), how to detect tables and so forth.
            </summary>
      <remarks>
            All properties are already set to their defaults:<br /><br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.Format" /> = eWordDocument.Docx;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.DetectTables" /> = true;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.RenderMode" /> = eRenderMode.Flowing;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.KeepCharScaleAndSpacing" /> = true;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.ShowInvisibleText" /> = false;<br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Overview of all properties to convert PDF to Word\Sample.cs" title="Overview of all properties to convert PDF to Word in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Overview of all properties to convert PDF to Word\Sample.vb" title="Overview of all properties to convert PDF to Word in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.CWordOptions.#ctor">
      <summary>
            Allows to specify various properties for Word document: format (Docx or Rtf), how to detect tables and so forth.
            </summary>
      <remarks>
            All properties are already set to their defaults:<br /><br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.Format" /> = eWordDocument.Docx;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.DetectTables" /> = true;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.RenderMode" /> = eRenderMode.Flowing;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.KeepCharScaleAndSpacing" /> = true;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.ShowInvisibleText" /> = false;<br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Overview of all properties to convert PDF to Word\Sample.cs" title="Overview of all properties to convert PDF to Word in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Overview of all properties to convert PDF to Word\Sample.vb" title="Overview of all properties to convert PDF to Word in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.PdfFocus.CWordOptions.eRenderMode">
      <summary>
            Gets or sets a rendering mode for a resulting Word document: Flowing, Continuos or Exact.
            </summary>
      <remarks>
            Default value: <see cref="F:SautinSoft.PdfFocus.CWordOptions.eRenderMode.Flowing" />.<br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Overview of all properties to convert PDF to Word\Sample.cs" title="Overview of all properties to convert PDF to Word in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Overview of all properties to convert PDF to Word\Sample.vb" title="Overview of all properties to convert PDF to Word in VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.PdfFocus.CWordOptions.eRenderMode.Flowing">
      <summary>
            The most useful and common type of Word document for editing. The resulting Word document looks as if it was typed by human.
            </summary>
      <remarks>
            The document layout created without using text boxes. This is very convenient for editing and a resulting Word document looks as typed by a human.
            </remarks>
    </member>
    <member name="F:SautinSoft.PdfFocus.CWordOptions.eRenderMode.Continuous">
      <summary>
            A golden mean between <see cref="F:SautinSoft.PdfFocus.CWordOptions.eRenderMode.Flowing" /> and <see cref="F:SautinSoft.PdfFocus.CWordOptions.eRenderMode.Exact" /> modes.
            </summary>
      <remarks>
            The document layout created by using text boxes grouped in blocks.
            </remarks>
    </member>
    <member name="F:SautinSoft.PdfFocus.CWordOptions.eRenderMode.Exact">
      <summary>
            The most precise and fastest mode. The resulting Word document looks exact as PDF pixel by pixel.
            </summary>
      <remarks>
            The document layout created by using text boxes, this gives a monumental accuracy for  PDF to Word conversion. Because all text in PDF documents builded by coordinates and using text boxes allows to build Word document in the same way.
            </remarks>
    </member>
    <member name="T:SautinSoft.PdfFocus.CWordOptions.eWordDocument">
      <summary>
            Represents Word document formats: DOCX and RTF.
            </summary>
      <remarks>
            You may choose in what format the Word document will be saved: DOCX or RTF.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Set output format to DOCX or RTF\Sample.cs" title="How to specify a format for Word document (Docx or Rtf) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Set output format to DOCX or RTF\Sample.vb" title="How to specify a format for Word document (Docx or Rtf) in VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.PdfFocus.CWordOptions.eWordDocument.Rtf">
      <summary>
            Word document in a RTF format.
            </summary>
      <img src="../Overview/pictures/worddocument.png" />
      <br />
      <br />
    </member>
    <member name="F:SautinSoft.PdfFocus.CWordOptions.eWordDocument.Docx">
      <summary>
            Word document in a DOCX format.
            </summary>
      <img src="../Overview/pictures/worddocument.png" />
      <br />
      <br />
    </member>
    <member name="P:SautinSoft.PdfFocus.CWordOptions.Format">
      <summary>
            Gets or sets a format for a resulting Word document: DOCX and RTF. Default value: <see cref="F:SautinSoft.PdfFocus.CWordOptions.eWordDocument.Docx" />.
            </summary>
      <remarks>
            You may choose in what format the Word document will be saved: DOCX or RTF.<br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Set output format to DOCX or RTF\Sample.cs" title="How to specify a format for Word document (Docx or Rtf) in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Set output format to DOCX or RTF\Sample.vb" title="How to specify a format for Word document (Docx or Rtf) in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CWordOptions.RenderMode">
      <summary>
            Gets or sets a rendering mode for a resulting Word document: Flowing, Continuos or Exact. Default value: <see cref="F:SautinSoft.PdfFocus.CWordOptions.eRenderMode.Flowing" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Overview of all properties to convert PDF to Word\Sample.cs" title="Overview of all properties to convert PDF to Word in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Overview of all properties to convert PDF to Word\Sample.vb" title="Overview of all properties to convert PDF to Word in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CWordOptions.DetectTables">
      <summary>
            Gets or sets a value to parse and recreate tables. Default value: true.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Overview of all properties to convert PDF to Word\Sample.cs" title="Overview of all properties to convert PDF to Word in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Overview of all properties to convert PDF to Word\Sample.vb" title="Overview of all properties to convert PDF to Word in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CWordOptions.ShowInvisibleText">
      <summary>
            Gets or sets a value to show invisible text or not. Default value: false.
            </summary>
      <remarks>
            Sometimes a PDF document can contain a picture with a scanned text. 
            Besides of this, this document can contain invisible text over this picture.<br />
            In case you need to get only that text and skip picture, you may set 'PreserveImages' to false and
            set this property to true.<br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Overview of all properties to convert PDF to Word\Sample.cs" title="Overview of all properties to convert PDF to Word in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Overview of all properties to convert PDF to Word\Sample.vb" title="Overview of all properties to convert PDF to Word in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CWordOptions.KeepCharScaleAndSpacing">
      <summary>
            Gets or sets a value to preserve the original char scaling and spacing or reset it to all symbols to 100%. Default value: true.
            </summary>
      <remarks> 
            As you may know PDF contains embedded fonts with own symbol widths.
            But the resulting Word document will have fonts installed at your system.
            Sometimes their have different symbol width.<br />
            true - scale width of symbols to make it the same as in PDF.<br />
            false - don't scale width of symbols and use width of installed fonts.<br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Overview of all properties to convert PDF to Word\Sample.cs" title="Overview of all properties to convert PDF to Word in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Overview of all properties to convert PDF to Word\Sample.vb" title="Overview of all properties to convert PDF to Word in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.PdfFocus.CImageOptions">
      <summary>
            Set properties for produced images
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/imageoptions.png" /><br /><br /></remarks>
    </member>
    <member name="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">
      <summary>
            Set color depth for produced image
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB<br /><br /><img src="../Overview/pictures/imageoptions.colordepth.png" /><br /><br /></remarks>
    </member>
    <member name="F:SautinSoft.PdfFocus.CImageOptions.eColorDepth.BlackWhite1bpp">
      <summary>
            Black and White 1-bit index image
            </summary>
    </member>
    <member name="F:SautinSoft.PdfFocus.CImageOptions.eColorDepth.Grayscale24bpp">
      <summary>
            Grayscale 24-bit
            </summary>
    </member>
    <member name="F:SautinSoft.PdfFocus.CImageOptions.eColorDepth.Rgb24bpp">
      <summary>
            Colored 24-bit, Truecolor
            </summary>
    </member>
    <member name="F:SautinSoft.PdfFocus.CImageOptions.eColorDepth.Grayscale32bpp">
      <summary>
            Grayscale 32-bit
            </summary>
    </member>
    <member name="F:SautinSoft.PdfFocus.CImageOptions.eColorDepth.Rgb32bpp">
      <summary>
            Colored 32-bit
            </summary>
    </member>
    <member name="M:SautinSoft.PdfFocus.CImageOptions.#ctor">
      <summary>
            Set properties for produced images
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/imageoptions.png" /><br /><br /></remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageOptions.JpegQuality">
      <summary>
            Allows to specify the quality for output jpeg images from 1 to 100. Default value: 90.
            </summary>
      <remarks>
            This property affects only during the PDF to Jpeg conversion.
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageOptions.TiffCompressionType">
      <summary>
            Allows to set compression type for Tiff images: CompressionLZW , CompressionCCITT3, CompressionCCITT4. Default value: <see cref="F:System.Drawing.Imaging.EncoderValue.CompressionLZW" />.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageOptions.RenderTextualData">
      <summary>
            Setting this property to false allows to skip the rendering of all textual data. Default value: true.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageOptions.Dpi">
      <summary>
            Set default image resolution in dots per inch.Default value: 120.
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            We recommend to use 120 dpi, but you may use any value within reasonable limits<br /><br /><br /><img src="../Overview/pictures/imageoptions.dpi.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Set custom dpi\Sample.cs" title="How to set custom dpi in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Set custom dpi\Sample.vb" title="How to set custom dpi in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageOptions.ColorDepth">
      <summary>
            Set color depth for produced images. Default value: <see cref="F:SautinSoft.PdfFocus.CImageOptions.eColorDepth.Rgb24bpp" />.
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB<br /><br /><img src="../Overview/pictures/imageoptions.colordepth.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert PDF to 1-bit black and white PNG\Sample.cs" title="How to set color depth in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert PDF to 1-bit black and white PNG\Sample.vb" title="How to set color depth in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">
      <summary>
            Set format for produced images. Default value: <see cref="P:System.Drawing.Imaging.ImageFormat.Png" />.
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Set format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />.<br /><br /><img src="../Overview/pictures/imageoptions.imageformat.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Set Image Format\Sample.cs" title="How to set image format in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Set Image Format\Sample.vb" title="How to set image format in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.CImageOptions.Resize(System.Drawing.Size,System.Boolean)">
      <summary>
            Set custom image dimensions in pixels
            </summary>
      <remarks>Allows to set a custom image width and height or a one of it.</remarks>
      <param name="sizeInPixels">Structure to store values of width and height in px</param>
      <param name="preserveAspectRatio">Keep aspect ratio in case of true value</param>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert PDF into specified Image height and width\Sample.cs" title="How to convert PDF into specified Image height &amp; width in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert PDF into specified Image height and width\Sample.vb" title="How to convert PDF into specified Image height &amp; width in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.CImageOptions.Resize(System.Drawing.SizeF,System.Boolean)">
      <summary>
            Set custom image dimensions in points
            </summary>
      <remarks>Allows to set a custom image width and height or a one of it.</remarks>
      <param name="sizeInPoints">Structure to store values of width and height in points</param>
      <param name="preserveAspectRatio">Keep aspect ratio in case of true value</param>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert PDF into specified Image height and width\Sample.cs" title="How to convert PDF into specified Image height &amp; width in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert PDF into specified Image height and width\Sample.vb" title="How to convert PDF into specified Image height &amp; width in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.CImageOptions.Resize(System.Single,System.Single)">
      <summary>
            Set image scale in percents
            </summary>
      <remarks>Allows to set a custom image width and height or a one of it.</remarks>
      <param name="scaleWidth">Set scale for width</param>
      <param name="scaleHeight">Set scale for height</param>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert PDF into specified Image height and width\Sample.cs" title="How to convert PDF into specified Image height &amp; width in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert PDF into specified Image height and width\Sample.vb" title="How to convert PDF into specified Image height &amp; width in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.CImageOptions.ResetResizing">
      <summary>
            Clear all previous resizing
            </summary>
    </member>
    <member name="T:SautinSoft.PdfFocus.CHtmlOptions">
      <summary>
            Allows to specify various properties for HTML document: title, how to store images, inlince CSS and so forth.
            </summary>
      <remarks>
            All properties are already set to their defaults:<br /><br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.JpegQuality" /> = 90;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.IncludeImageInHtml" /> = false;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.ImageFolder" /> = String.Empty;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.ImageSubFolder" /> = "images";<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.ImageFileName" /> = "image";<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.ImageNumStart" /> = 1;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.PreserveImages" /> = true;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.Title" /> = "Untitled document";<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.ImageType" /> = eHtmlImageType.Png;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.SingleFontFamily" /> = String.Empty;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.SingleFontSize" /> = null;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.CombineImages" /> = false;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.InlineCSS" /> = false;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.ProduceOnlyHtmlBody" /> = false;<br /><see cref="P:SautinSoft.PdfFocus.CHtmlOptions.ShowInvisibleText" /> = false;<br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.PdfFocus.CHtmlOptions.#ctor" -->
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.ShowInvisibleText">
      <summary>
            Gets or sets a value to show invisible text or not. Default value: false.
            </summary>
      <remarks>
            Sometimes a PDF document can contain a picture with a scanned text. 
            Besides of this, this document can contain invisible text over this picture.<br />
            In case you need to get only that text and skip picture, you may set 'PreserveImages' to false and
            set this property to true.<br /><br /></remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.InlineCSS">
      <summary>
            Gets or sets a value to produce inline CSS or put all CSS styles will between &lt;style&gt;...&lt;/style&gt; tags. Default value: false.
            </summary>
      <remarks>
            Thus all CSS styles will be saved between &lt;style&gt;...&lt;/style&gt; tags.<br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\Convert multiple PDF files to HTML\Sample.cs" title="How to convert multiple PDF files to HTML using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\Convert multiple PDF files to HTML\Sample.vb" title="How to convert multiple PDF files to HTML using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.UseNumericCharacterReference">
      <summary>
            True: Write the all characters in "<a href="http://en.wikipedia.org/wiki/Numeric_character_reference" target="_blank">NCR</a>" notation: &amp;#xxx;. False: Write the all characters as Unicode (recommended). Default value: false.
            </summary>
      <remarks>
            A numeric character reference (NCR) is a common markup construct used in SGML and other SGML-related markup languages such as HTML and XML. It consists of a short sequence of characters that, in turn, represent a single character from the Universal Character Set (UCS) of Unicode.<br /><br />
            See details in <a href="http://en.wikipedia.org/wiki/Numeric_character_reference" target="_blank">Wikipedia ...</a><img src="../Overview/pictures/usenumericcharacterreference.png" /></remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.ProduceOnlyHtmlBody">
      <summary>
            Gets or sets a value to produce a complete HTML document or only between between &lt;body&gt;...&lt;/body&gt; tags. Default value: false.
            </summary>
      <remarks>
            In case of 'True' you will get only HTML between &lt;body&gt;...&lt;/body&gt; tags.<br />
            This property will be useful to merge multiply HTML documents into a single.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\Convert multiple PDF files to HTML\Sample.cs" title="How to convert multiple PDF files to HTML using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\Convert multiple PDF files to HTML\Sample.vb" title="How to convert multiple PDF files to HTML using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.SingleFontFamily">
      <summary>
            Sets or gets a single font family for a whole text in the HTML document. Default value: <see cref="F:System.String.Empty" />.
            </summary>
      <remarks>
            By default each block of text will have the same font family as in the original PDF.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a single font for all text during PDF to HTML\Sample.cs" title="How to set a single font for all text during PDF to HTML converting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a single font for all text during PDF to HTML\Sample.vb" title="How to set a single font for all text during PDF to HTML converting in VB.Net">
        </code>
      </example>
    </member>
    <!-- Badly formed XML comment ignored for member "P:SautinSoft.PdfFocus.CHtmlOptions.SingleFontSize" -->
    <!-- Badly formed XML comment ignored for member "P:SautinSoft.PdfFocus.CHtmlOptions.CombineImages" -->
    <member name="T:SautinSoft.PdfFocus.CHtmlOptions.eHtmlImageType">
      <summary>
            Allows to set in which type store all images for the HTML document.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.PdfFocus.CHtmlOptions.eHtmlImageType.Png">
      <summary>
            PNG.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\ASP.Net - PDF Viewer\Default.aspx.cs" title="How to make PDF Viewer in ASP.Net and C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\ASP.Net - PDF Viewer\Default.aspx.vb" title="How to make PDF Viewer in ASP.Net and VB.Net">
        </code>
      </example>
    </member>
    <member name="F:SautinSoft.PdfFocus.CHtmlOptions.eHtmlImageType.Jpeg">
      <summary>
            JPEG.
            </summary>
      <remarks>See also the property <see cref="P:SautinSoft.PdfFocus.CHtmlOptions.JpegQuality" />.
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.ImageType">
      <summary>
            Gets or sets the type to store all images for the current HTML document. Default value: <see cref="F:SautinSoft.PdfFocus.CHtmlOptions.eHtmlImageType.Png" />.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.JpegQuality">
      <summary>
            Allows to specify the quality for output JPEG images from 1 to 100. Default value: 90.
            </summary>
      <remarks>
            This property works only when 'ImageType' is set to 'HtmlImageType.Jpeg'.
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.IncludeImageInHtml">
      <summary>
            Allows to specify how to store images: Inside HTML document as base64 images or as linked separate image files. Default value: false.
            </summary>
      <remarks>
            In this case the component will save images to the file system.<br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.ImageFolder">
      <summary>
            Gets or sets a path to a directory to store images after converting. Notice also to the property "ImageSubFolder". Default value: "".
            </summary>
      <remarks>
            Notice: The folder must exist. The component can't and will not create this folder.<br />
            The path must be an absolute and starts from a drive letter: "C:\.." or "D:\" etc.<br /><br />
            Default value: The parent directory of the output HTML document when you are working with files or "String.Empty" when you are working using memory.<br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.ImageSubFolder">
      <summary>
            Gets or sets a folder name which will be created by the component to store images. Default value: "images".
            </summary>
      <remarks>
            For converting physical files or "images" for conversion in memory.<br /><br />
            Must be without any drive letters "C:\.." or "D:\" etc, only the folder as "myfolder".<br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.ImageFileName">
      <summary>
            Gets or sets a template name for images. Default value: "image".
            </summary>
      <remarks>
            In case of the "image" value, the extracted images will be named image1.png, image2.png, imageN.png
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.ImageNumStart">
      <summary>
            The starting number for naming images in the HTML document. Default value: 1.
            </summary>
      <remarks>
            In case of the "5" value, the extracted images will be named image5.png, image6.png, imageN.png
            </remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.PreserveImages">
      <summary>
            Specifies whether to keep images within the HTML document or skip them. Default value: true.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CHtmlOptions.Title">
      <summary>
            Sets the title for the HTML document. Default value: "Untitled document".
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\Convert PDF to separate HTML pages\Sample.cs" title="How to convert PDF to separate HTML pages in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\Convert PDF to separate HTML pages\Sample.vb" title="How to convert PDF to separate HTML pages in VB.Net">
        </code>
      </example>
    </member>
    <member name="T:SautinSoft.PdfFocus.PdfImage">
      <summary>
            Allows to extract images from PDF
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.PdfImage.PageNumber">
      <summary>
            Get page number from which this image was extracted.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.PdfImage.Width">
      <summary>
            Image width in points.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.PdfImage.Height">
      <summary>
            Image height in points.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.PdfImage.XPos">
      <summary>
            Position of the image by X.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.PdfImage.YPos">
      <summary>
            Position of the image by Y.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.PdfImage.Picture">
      <summary>
            The image data as System.Drawing.Image object.
            </summary>
    </member>
    <member name="T:SautinSoft.PdfFocus.CExcelOptions">
      <summary>
            Sets various properties for the Excel document
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CExcelOptions.CultureInfo">
      <summary>
            Gets or sets CultureInfo to convert the string representation to its number equivalent using specified style and culture format. Default value: <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CExcelOptions.SingleSheet">
      <summary>
            Specifies to put all pages from PDF document into a single worksheet. Default value: false.
            </summary>
      <remarks>
            In case of value "false" the each page from PDF will be placed on a separate worksheet in Excel.
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CExcelOptions.LeftIndent">
      <summary>
            Allows to move the sheet content by the N columns from the left. Default value: 0.
            </summary>
      <remarks>
            In other words, it inserts N empty columns from the left.
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CExcelOptions.TopIndent">
      <summary>
            Allows to move the sheet content by the N rows from the top. Default value: 0.
            </summary>
      <remarks>
            In other words, it inserts N empty rows from the top.
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CExcelOptions.SpacingBetweenTables">
      <summary>
            Allows to insert N empty rows between tables. Default value: 1.
            </summary>
      <remarks>
            The property is useful only when is the <see cref="P:SautinSoft.PdfFocus.CExcelOptions.SingleSheet">SingleSheet</see> is set to "true".<br /></remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CExcelOptions.ConvertNonTabularDataToSpreadsheet">
      <summary>
            Convert even a textual data to a table. Default value: true.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Excel\Convert only tables from PDF to Excel\Sample.cs" title="How to convert only tables PDF to Excel and skip all textual data using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Excel\Convert only tables from PDF to Excel\Sample.vb" title="How to convert only tables PDF to Excel and skip all textual data using VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CExcelOptions.PreservePageLayout">
      <summary>
            Preserve original page layout or place all tabular data before textual data. Default value: true.
            </summary>
      <remarks>
            In case of false, all tables will be placed before textual data.
            </remarks>
    </member>
    <member name="T:SautinSoft.PdfFocus.CXmlOptions">
      <summary>
            Sets various properties for the XML document
            </summary>
    </member>
    <member name="M:SautinSoft.PdfFocus.CXmlOptions.#ctor">
      <summary>
            Creates an object of CXmlOptions class.
            </summary>
      <remarks>
            Sets various properties for the XML document.
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.CXmlOptions.ConvertNonTabularDataToSpreadsheet">
      <summary>
            Convert even a textual data to a table. Default value: true.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CXmlOptions.NodeLevel1">
      <summary>
            Set or get a name for root node. Default value: "document".
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CXmlOptions.NodeLevel2">
      <summary>
            Set or get a name for node with level 2. Default value: "page".
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CXmlOptions.NodeLevel3">
      <summary>
            Set or get a name for node with level 3. Default value: "table".
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CXmlOptions.NodeLevel4">
      <summary>
            Set or get a name for node with level 4. Default value: "row".
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CXmlOptions.NodeLevel5">
      <summary>
            Set or get a name for node with level 5. Default value: "cell".
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.CXmlOptions.UseRowColSpan">
      <summary>
            Set or get a value indicating of using rowspan and colspan attributes. Default value: true.
            </summary>
    </member>
    <member name="T:SautinSoft.PdfFocus.CImageExtractionOptions">
      <summary>
            Allows to set properties to extract only specific images from PDF
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\Extract Images from PDF\Extract all images with width and height more than 200px\Sample.cs" title="Extract all images with width and height more than 200px in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\Extract Images from PDF\Extract all images with width and height more than 200px\Sample.vb" title="Extract all images with width and height more than 200px in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageExtractionOptions.RasterizeComplexGraphics">
      <summary>
            Additionally convert all vector graphics to raster images or not. Default value: false.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\Extract Images from PDF\Extract all images and vector graphics from PDF\Sample.cs" title="Extract all images and vector graphics from PDF in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\Extract Images from PDF\Extract all images and vector graphics from PDF\Sample.vb" title="Extract all images and vector graphics from PDF in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageExtractionOptions.MinSize">
      <summary>
            Specify minimal size of exracted images in pixels. Default value: null.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\Extract Images from PDF\Extract all images with width and height more than 200px\Sample.cs" title="Extract all images with width and height more than 200px in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\Extract Images from PDF\Extract all images with width and height more than 200px\Sample.vb" title="Extract all images with width and height more than 200px in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.CImageExtractionOptions.MaxSize">
      <summary>
            Specify maximal size of exracted images in pixels. Default value: null.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\Extract Images from PDF\Extract all images with width and height more than 200px\Sample.cs" title="Extract all images with width and height more than 200px in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\Extract Images from PDF\Extract all images with width and height more than 200px\Sample.vb" title="Extract all images with width and height more than 200px in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.#ctor">
      <summary>
            Creates an object of the <see cref="T:SautinSoft.PdfFocus" /> class
            </summary>
      <example>
        <code>
            SautinSoft.PdfFocus f = new SautinSoft.PdfFocus();
            </code>
        <code lang="vbnet">
            Dim f As New SautinSoft.PdfFocus()
            </code>
      </example>
      <remarks>
        <img src="../Overview/pictures/pdffocus-scheme.png" />
        <br />
        <br />
      </remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Convert PDF to Word in memory\Sample.cs" title="Convert PDF to Word in memory in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Convert PDF to Word in memory\Sample.vb" title="Convert PDF to Word in memory in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.WordOptions">
      <summary>
            Allows to specify various properties for Word document: format (Docx or Rtf), how to detect tables and so forth.
            </summary>
      <remarks>
            All properties are already set to their defaults:<br /><br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.Format" /> = eWordDocument.Docx;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.DetectTables" /> = true;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.RenderMode" /> = eRenderMode.Flowing;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.KeepCharScaleAndSpacing" /> = true;<br /><see cref="P:SautinSoft.PdfFocus.CWordOptions.ShowInvisibleText" /> = false;<br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Overview of all properties to convert PDF to Word\Sample.cs" title="Overview of all properties to convert PDF to Word in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Overview of all properties to convert PDF to Word\Sample.vb" title="Overview of all properties to convert PDF to Word in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.ImageOptions">
      <summary>
            Set properties for produced images
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/imageoptions.png" /><br /><br /></remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.HtmlOptions">
      <summary>
            Gets and sets various properties for HTML document: title, how to store images, inlince CSS and so forth.
            </summary>
      <remarks>
            All properties are already set to their defaults:<br /><br /><see cref="!:HtmlOptions.JpegQuality" /> = 90;<br /><see cref="!:IncludeImageInHtml" /> = false;<br /><see cref="!:ImageFolder" /> = String.Empty;<br /><see cref="!:ImageSubFolder" /> = "images";<br /><see cref="!:ImageFileName" /> = "image";<br /><see cref="!:ImageNumStart" /> = 1;<br /><see cref="P:SautinSoft.PdfFocus.PreserveImages" /> = true;<br /><see cref="!:Title" /> = "Untitled document";<br /><see cref="!:ImageType" /> = eHtmlImageType.Png;<br /><see cref="!:SingleFontFamily" /> = String.Empty;<br /><see cref="!:SingleFontSize" /> = null;<br /><see cref="!:CombineImages" /> = false;<br /><see cref="!:InlineCSS" /> = false;<br /><see cref="!:ProduceOnlyHtmlBody" /> = false;<br /><see cref="!:ShowInvisibleText" /> = false;<br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a location of images during PDF to HTML\Sample.cs" title="How to set a location of images during PDF to HTML in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a location of images during PDF to HTML\Sample.vb" title="How to set a location of images during PDF to HTML in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.ExcelOptions">
      <summary>
            Set properties for the Excel document
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.XmlOptions">
      <summary>
            Set properties for the XML document
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.ImageExtractionOptions">
      <summary>
            Allows to set properties to extract only specific images from PDF.
            </summary>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\Extract Images from PDF\Extract all images with width and height more than 200px\Sample.cs" title="Extract all images with width and height more than 200px in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\Extract Images from PDF\Extract all images with width and height more than 200px\Sample.vb" title="Extract all images with width and height more than 200px in VB.Net">
        </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.Exception">
      <summary>
            Get exception details in case of converting failed
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            This is a variable of standard <see cref="T:System.Exception" /> class.<br /><br />
            For example, if you get an error during PDF transformation, please take a look at the <see cref="P:System.Exception.Message" /> to see error's details.<br /><br /><img src="../Overview/pictures/exception.png" /><br /><br /></remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.Serial">
      <summary>
            Allows to activate your copy of the PDF Focus .Net after purchasing
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            After purchasing you will get the full version of product and your serial number. This parameter doesn't have any effect in the trial version. This parameter is necessary in full version, please don't forget to specify it by your serial number.
            <img src="../Overview/pictures/serial.png" /><br /><br /></remarks>
      <example>
        <code>
            SautinSoft.PdfFocus f = new SautinSoft.PdfFocus();
            f.Serial = "XXXXXXXXXX";
            </code>
        <code lang="vbnet">
            Dim f As New SautinSoft.PdfFocus()
            f.Serial = "XXXXXXXXXX"
            </code>
      </example>
    </member>
    <member name="P:SautinSoft.PdfFocus.Password">
      <summary>
            Helps to convert a password protected PDF documents
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Some PDF files can be protected by password even for opening/reading. This property is necessary only when you are converting protected PDF document. Usually it's unnecessary.<br /><br /><img src="../Overview/pictures/password.png" /><br /><br /></remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.PageCount">
      <summary>
            Contains number of pages in PDF document
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            This property will have a value after calling the method <see cref="M:SautinSoft.PdfFocus.OpenPdf(System.String)">Open</see>.<br /><br /><img src="../Overview/pictures/pagecount.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Text\Extract Text from 2nd-3rd pages of PDF\Sample.cs" title="Extract Text from 2nd-3rd pages of PDF document using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Text\Extract Text from 2nd-3rd pages of PDF\Sample.vb" title="Extract Text from 2nd-3rd pages of PDF document using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.OpenPdf(System.IO.Stream)">
      <summary>
            Opens PDF document as <see cref="T:System.IO.Stream" /> object
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> object which contains PDF document</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/openpdfms.png" /><br /><br /></remarks>
    </member>
    <member name="M:SautinSoft.PdfFocus.OpenPdf(System.Byte[])">
      <summary>
            Opens PDF document as byte stream
            </summary>
      <param name="bytes">Byte stream which contains PDF document</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/openpdfbytearray.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Convert PDF to Word in memory\Sample.cs" title="Export PDF to Word in memory using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Convert PDF to Word in memory\Sample.vb" title="Export PDF to Word in memory using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.OpenPdf(System.String)">
      <summary>
            Opens local PDF file
            </summary>
      <param name="fileName">Full local path to PDF file</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/openpdffile.png" /><br /><br /></remarks>
    </member>
    <member name="M:SautinSoft.PdfFocus.OpenPdf(System.Uri)">
      <summary>
            Opens PDF document through <see cref="T:System.Uri" /> class
            </summary>
      <param name="uri">
        <see cref="T:System.Uri" /> path to the PDF document</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/openpdfurl.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Convert URL-PDF from Internet to a Word file\Sample.cs" title="How to convert URL-PDF from Internet to a Word file in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Convert URL-PDF from Internet to a Word file\Sample.vb" title="How to convert URL-PDF from Internet to a Word file in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ClosePdf">
      <summary>
            Releases PDF document from memory
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/closepdf.png" /><br /><br /></remarks>
    </member>
    <member name="M:SautinSoft.PdfFocus.GetPageSize(System.Int32)">
      <summary>
            Returns the page height and width in points for a specific page
            </summary>
      <remarks>
            Point is the 1/72 of inch.<br />
            Let us say, you have a "Letter" page size 8,5 x 11 inches, you will get this size in points:<br /><br />
            Width: 8,5 * 72 = 612 points.<br />
            Height: 11 * 72 = 792 points.
            </remarks>
      <param name="pageNumber">A specific page number in the PDF document</param>
      <returns>
            Returns the structure <see cref="T:System.Drawing.SizeF" /> with Width and Height properties.
            </returns>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToImage(System.String,System.Int32)">
      <summary>
            Saves a specific page of PDF document into image file
            </summary>
      <param name="fileName">Path to image file</param>
      <param name="page">Page which you want to save as image</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/toimagefile.png" /><br /><br /></remarks>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert PDF 1st page to PNG file\Sample.cs" title="How to convert PDF 1st page to PNG file in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert PDF 1st page to PNG file\Sample.vb" title="How to convert PDF 1st page to PNG file in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToImage(System.String,System.String)">
      <summary>
            Saves all pages of PDF document to Image file(s)
            </summary>
      <param name="outFolder">Full path to existing folder where to save images</param>
      <param name="templateFileName">Template file name for image files</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/toimagefolder.png" /><br /><br /></remarks>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert PDF files to 300-dpi TIFF files\Sample.cs" title="Convert PDF files to 300-dpi TIFF files in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert PDF files to 300-dpi TIFF files\Sample.vb" title="Convert PDF files to 300-dpi TIFF files in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToImage(System.String,System.String,System.String[]@)">
      <summary>
            Saves all pages of PDF document to Image file(s)
            </summary>
      <param name="outFolder">Full path to existing folder where to save images.</param>
      <param name="templateFileName">Template file name for image files.</param>
      <param name="outputFileNames">An array with paths of produced image files.</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/toimagefolder.png" /><br /><br /></remarks>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToDrawingImage(System.Int32)">
      <summary>
            Saves a specific page of PDF document into standard <see cref="T:System.Drawing.Image" /> object
            </summary>
      <param name="page">Page which you want to save as image</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/todrawingimage.png" /><br /><br /></remarks>
      <returns>
        <see cref="T:System.Drawing.Image" /> object - converting successfully<br />
            null - converting failed         
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert custom PDF page to System.Drawing.Image object\Sample.cs" title="Convert custom PDF page to System.Drawing.Image object in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert custom PDF page to System.Drawing.Image object\Sample.vb" title="Convert custom PDF page to System.Drawing.Image object in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToMultipageTiff">
      <summary>
            Saves whole PDF document into multipage TIFF byte stream
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/tomultipagetiffbytearray.png" /><br /><br /></remarks>
      <returns>
            Multipage TIFF as byte stream - converting successfully<br />
            null - converting failed         
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\ASP.Net - Export PDF to Multipage TIFF\Default.aspx.cs" title="ASP.Net - Export PDF to Multipage TIFF in memory using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\ASP.Net - Export PDF to Multipage TIFF\Default.aspx.vb" title="ASP.Net - Export PDF to Multipage TIFF in memory using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToMultipageTiff(System.String)">
      <summary>
            Saves whole PDF document into multipage TIFF file
            </summary>
      <param name="fileName">Path to multipage TIFF file</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/tomultipagetifffile.png" /><br /><br /></remarks>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert PDF file to Multipage TIFF file\Sample.cs" title="How to convert PDF file to Multipage TIFF file in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert PDF file to Multipage TIFF file\Sample.vb" title="How to convert PDF file to Multipage TIFF file in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToMultipageTiff(System.Drawing.Imaging.EncoderValue)">
      <summary>
            Saves whole PDF document into multipage TIFF byte stream
            </summary>
      <param name="compressionType">Allows to set compression type: CompressionCCITT3, CompressionCCITT4, CompressionLZW, CompressionRle, CompressionNone</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/tomultipagetiffbytearraycustomcompression.png" /><br /><br /></remarks>
      <returns>
            Multipage TIFF as byte stream - converting successfully<br />
            null - converting failed         
            </returns>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToMultipageTiff(System.String,System.Drawing.Imaging.EncoderValue)">
      <summary>
            Saves whole PDF document into multipage TIFF file
            </summary>
      <param name="fileName">Path to multipage TIFF file</param>
      <param name="compressionType">Allows to set compression type: CompressionCCITT3, CompressionCCITT4, CompressionLZW, CompressionRle, CompressionNone</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/tomultipagetifffilecustomcompression.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\Convert PDF file to Black&amp;White Multipage-TIFF\Sample.cs" title="How to convert PDF file to Black&amp;White Multipage-TIFF in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\Convert PDF file to Black&amp;White Multipage-TIFF\Sample.vb" title="How to convert PDF file to Black&amp;White Multipage-TIFF in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToImage(System.Int32)">
      <summary>
            Saves a specific page of PDF document into image as byte stream
            </summary>
      <param name="page">Page which you want to save as image</param>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/toimagebytearray.png" /><br /><br /></remarks>
      <returns>
            Image as byte stream in specified <see cref="T:System.Drawing.Imaging.ImageFormat" /> - converting successfully<br />
            null - converting failed         
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Images\ASP.Net - Export PDF to Jpeg\Default.aspx.cs" title="ASP.Net - Export PDF to Jpeg in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Images\ASP.Net - Export PDF to Jpeg\Default.aspx.vb" title="ASP.Net - Export PDF to Jpeg in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToImage">
      <summary>
            Saves all pages of PDF document into ArrayList with images as byte streams
            </summary>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set various image properties using the property <see cref="P:SautinSoft.PdfFocus.ImageOptions">ImageOptions</see>. For example, set:<ul><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.Dpi">Dpi</see> - image resolution in dots per inch. Default value: 120</li><li><see cref="P:SautinSoft.PdfFocus.CImageOptions.ImageFormat">ImageFormat</see> - format for produced images as standard <see cref="T:System.Drawing.Imaging.ImageFormat" />. Default value: Png</li><li><see cref="T:SautinSoft.PdfFocus.CImageOptions.eColorDepth">ColorDepth</see> - color depth or bit depth is the number of bits used to represent the color of a single pixel. Default value: 24 bit RGB</li></ul><img src="../Overview/pictures/toimagebytearray.png" /><br /><br /></remarks>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> containing images as byte streams, where each image corresponds to each PDF page<br /><br />
            not null - converting successfully<br />
            null - converting failed         
            </returns>
    </member>
    <member name="T:SautinSoft.PdfFocus.PageProgressDelegate">
      <summary>
            Allows to define a progress indicator
            </summary>
      <param name="current">current page</param>
      <param name="total">total pages</param>
    </member>
    <member name="E:SautinSoft.PdfFocus.NotifyPageProgress">
      <summary>
            Allows to define a progress indicator
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.RenderPages">
      <summary>
            Allows to specify a set of page ranges for converting
            </summary>
      <remarks>
            Let us say, we decide to convert these page ranges: 1 to 2, 5 to 7.<br />
            The code in C# will look so:
            f.RenderPages = new int[][]<br />
            {
                new int [] {1,2},
                new int [] {5,7}
            };
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.OptimizeImages">
      <summary>
            Gets or sets a value indicating whether to merge adjacent images into a one. Default value: false.
            </summary>
    </member>
    <member name="P:SautinSoft.PdfFocus.PreserveImages">
      <summary>
            Gets or sets a value indicating whether to load images from PDF or skip them. Default value: true.
            </summary>
      <remarks>
            In case of 'false' you may significantly save a time of loading a PDF document and using of memory.<br />
            we recommend to set this property to 'false' when you are need only in textual data from PDF.
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.PreserveGraphics">
      <summary>
            Gets or sets a value indicating whether to load vector graphics from PDF or skip it. Default value: true.
            </summary>
      <remarks>
            In case of 'false' you may significantly save a time of loading a PDF document and using of memory.<br />
            We recommend to set this property to 'false' when you are need only in textual data from PDF.<br />
            Note: that in case of 'false' the properties <see cref="!:DetectTables" /> and <see cref="!:RasterizeVectorGraphics" /> will not work.
            </remarks>
    </member>
    <member name="P:SautinSoft.PdfFocus.RenderPagesString">
      <summary>
            Sets a custom page range for converting: "1-3, 5, 8-13, 16".
            </summary>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToWord(System.String,System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or range of pages in <see cref="T:SautinSoft.PdfFocus.CWordOptions.eWordDocument">Word</see> file
            </summary>
      <param name="fileName">Path to the Word file</param>
      <param name="fromPage">The starting page for export in Word document</param>
      <param name="toPage">The ending page for export in Word document</param>
      <returns>
            0 - saving successfully.<br />
            2 - can't create output file, check the output path.<br />
            3 - problem with rendering of Word (Docx or RTF) document. Please email this PDF document at <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a>.
            </returns>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set some properties for produced Word document using the property <see cref="P:SautinSoft.PdfFocus.WordOptions">WordOptions</see><br /><br />
            For example, set:<ul><li><see cref="T:SautinSoft.PdfFocus.CWordOptions.eWordDocument">Format</see> - set format for resulting Word document</li></ul><img src="../Overview/pictures/towordfilerange.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Convert diapason of PDF pages to Word file\Sample.cs" title="Convert diapason of PDF pages to Word file in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Convert diapason of PDF pages to Word file\Sample.vb" title="Convert diapason of PDF pages to Word file in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToWord(System.String)">
      <summary>
            Saves all pages of the PDF document in <see cref="T:SautinSoft.PdfFocus.CWordOptions.eWordDocument">Word</see> file
            </summary>
      <param name="fileName">Path to the Word file</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - problem with rendering of Word (Docx or RTF) document. Please email this PDF document at <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a>.
            </returns>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br />
            Before converting you may set some properties for produced Word document using the property <see cref="P:SautinSoft.PdfFocus.WordOptions">WordOptions</see><br /><br />
            For example, set:<ul><li><see cref="T:SautinSoft.PdfFocus.CWordOptions.eWordDocument">Format</see> - set format for resulting Word document</li></ul><img src="../Overview/pictures/towordfile.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Convert PDF file to Word file\Sample.cs" title="Convert PDF file to Word file in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Convert PDF file to Word file\Sample.vb" title="Convert PDF file to Word file in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToWord(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or diapason of pages to a Word (Docx or RTF) document as a Stream object.
            </summary>
      <param name="stream">Stream object to save a Word document. Stream must be not null.</param>
      <param name="fromPage">The starting page for exporting to Word</param>
      <param name="toPage">The ending page for exporting to Word</param>
      <returns>
            0 - saving successfully.<br />
            2 - problem with parsing of PDF document. Please email this PDF document at <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a>.<br />
            3 - problem with rendering of Word (Docx or RTF) document. Please email this PDF document at <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a>.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Convert PDF to Word in memory\Sample.cs" title="How to convert PDF to Word in memory using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Convert PDF to Word in memory\Sample.vb" title="How to convert PDF to Word in memory using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToWord(System.IO.Stream)">
      <summary>
            Saves all pages of the PDF document to Word (Docx or RTF) as a Stream object.
            </summary>
      <param name="stream">Stream object to save a Word document. Stream must be not null.</param>
      <returns>
            0 - saving successfully.<br />
            2 - problem with parsing of PDF document. Please email this PDF document at <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a>.<br />
            3 - problem with rendering of Word (Docx or RTF) document. Please email this PDF document at <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a>.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Convert PDF to Word in memory\Sample.cs" title="How to convert PDF to Word in memory using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Convert PDF to Word in memory\Sample.vb" title="How to convert PDF to Word in memory using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToWord(System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or diapason of pages to a Word (Docx or RTF) document and returns it as array of bytes.
            </summary>
      <param name="fromPage">The starting page for exporting to Word</param>
      <param name="toPage">The ending page for exporting to Word</param>
      <returns>
            Array of bytes with Word document - in case of converting successful.<br />
            null - in case of converting failed. Please email this PDF document at <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a>.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\Convert each PDF page to separate Docx documents\Sample.cs" title="How to convert each PDF page to separate Docx documents in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\Convert each PDF page to separate Docx documents\Sample.vb" title="How to convert each PDF page to separate Docx documents in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToWord">
      <summary>
            Saves all pages of the PDF document into a Word (Docx or RTF) document and returns it as array of bytes
            </summary>
      <returns>
            Array of bytes with a Word (Docx or RTF) document document - in case of converting successful.<br />
            null - in case of converting failed. Please email this PDF document at <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a>.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Word\ASP.Net - Export PDF to Word\Default.aspx.cs" title="ASP.Net - Export PDF to Word using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Word\ASP.Net - Export PDF to Word\Default.aspx.vb" title="ASP.Net - Export PDF to Word using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToText(System.String,System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or range of pages in Text file
            </summary>
      <param name="fileName">Path to the Text file</param>
      <param name="fromPage">The starting page for export in Text document</param>
      <param name="toPage">The ending page for export in Text document</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/totextfilerange.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Text\Extract Text from 2nd-3rd pages of PDF\Sample.cs" title="How to extract Text from 2nd-3rd pages of PDF in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Text\Extract Text from 2nd-3rd pages of PDF\Sample.vb" title="How to extract Text from 2nd-3rd pages of PDF in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToText(System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or range of pages in Text document and returns it as string
            </summary>
      <param name="fromPage">The starting page for export in Text document</param>
      <param name="toPage">The ending page for export in Text document</param>
      <returns>
            String with Unicode Text - in case of converting successful<br />
            null - in case of converting failed        
            </returns>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/totextstringrange.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Text\Extract Text from PDF only from 1st page in memory\Sample.cs" title="How to extract Text from 1nd page of PDF in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Text\Extract Text from PDF only from 1st page in memory\Sample.vb" title="How to Text from 1nd page of PDF in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToText(System.String)">
      <summary>
            Saves all pages of the PDF document in Text file
            </summary>
      <param name="fileName">Path to the Text file</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/totextfile.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Text\Convert PDF file to Text file\Sample.cs" title="Convert PDF file to Text file in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Text\Convert PDF file to Text file\Sample.vb" title="Convert PDF file to Text file in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToText">
      <summary>
            Saves all pages of the PDF document in Text document and returns it as string
            </summary>
      <returns>
            String with Unicode Text - in case of converting successful<br />
            null - in case of converting failed        
            </returns>
      <remarks>
            To start the process, please <a href="http://www.sautinsoft.com/components/pdf_focus_net.zip">download the most fresh version</a> of PDF Focus .Net.<br /><br /><img src="../Overview/pictures/totextstring.png" /><br /><br /></remarks>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Text\ASP.Net - Extract Text from PDF\Default.aspx.cs" title="ASP.Net - Extract Text from PDF in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Text\ASP.Net - Extract Text from PDF\Default.aspx.vb" title="ASP.Net - Extract Text from PDF in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToHtml(System.String,System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or diapason of pages to HTML file
            </summary>
      <param name="fileName">Path to the HTML file</param>
      <param name="fromPage">The starting page for exporting to HTML</param>
      <param name="toPage">The ending page for exporting to HTML</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\How to set a single font for all text during PDF to HTML\Sample.cs" title="How to set a single font for all text during PDF to HTML converting in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\How to set a single font for all text during PDF to HTML\Sample.vb" title="How to set a single font for all text during PDF to HTML converting in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToHtml(System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or diapason of pages to HTML document and returns it as string
            </summary>
      <param name="fromPage">The starting page for exporting to HTML</param>
      <param name="toPage">The ending page for exporting to HTML</param>
      <returns>
            String with HTML document - in case of converting successful.<br />
            null - in case of converting failed.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\Convert PDF to separate HTML pages\Sample.cs" title="How to convert PDF to separate HTML pages in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\Convert PDF to separate HTML pages\Sample.vb" title="How to convert PDF to separate HTML pages in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToHtml(System.Int32,System.Int32,System.Collections.Generic.List{System.Drawing.Image})">
      <summary>
            Saves a specific PDF page or diapason of pages to HTML document and returns it as string
            </summary>
      <param name="fromPage">The starting page for exporting to HTML</param>
      <param name="toPage">The ending page for exporting to HTML</param>
      <param name="images">The list with images extracted from PDF</param>
      <returns>
            String with HTML document - in case of converting successful.<br />
            null - in case of converting failed.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\Convert PDF to HTML in memory and get List with all images\Sample.cs" title="How to convert PDF to HTML in memory and get List with all images in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\Convert PDF to HTML in memory and get List with all images\Sample.vb" title="How to convert PDF to HTML in memory and get List with all images in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToHtml(System.String)">
      <summary>
            Saves all pages of the PDF document to HTML file
            </summary>
      <param name="fileName">Path to the HTML file</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\Convert PDF file to HTML file\Sample.cs" title="How to convert PDF file to HTML file using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\Convert PDF file to HTML file\Sample.vb" title="How to convert PDF file to HTML file using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToHtml">
      <summary>
            Saves all pages of the PDF document into HTML document and returns it as string
            </summary>
      <returns>
            String with HTML document - in case of converting successful.<br />
            null - in case of converting failed.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to HTML\Convert PDF to HTML in memory\Sample.cs" title="How to convert PDF to HTML in memory using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to HTML\Convert PDF to HTML in memory\Sample.vb" title="How to convert PDF to HTML in memory using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToExcel(System.String,System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or diapason of pages to Excel file
            </summary>
      <param name="fileName">Path to the Excel file</param>
      <param name="fromPage">The starting page for exporting to the Excel</param>
      <param name="toPage">The ending page for exporting to the Excel</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToExcel(System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or diapason of pages to Excel workbook and returns it as byte array
            </summary>
      <param name="fromPage">The starting page for exporting to Excel</param>
      <param name="toPage">The ending page for exporting to Excel</param>
      <returns>
            Array of bytes with Excel document - in case of converting successful.<br />
            null - in case of converting failed.
            </returns>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToExcel(System.String)">
      <summary>
            Saves all pages of the PDF document to Excel file
            </summary>
      <param name="fileName">Path to the Excel file</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Excel\Convert PDF file to Excel file\Sample.cs" title="How to convert PDF file to Excel file using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Excel\Convert PDF file to Excel file\Sample.vb" title="How to convert PDF file to Excel file using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToExcel">
      <summary>
            Saves all pages of the PDF document into Excel workbook and returns it as byte array
            </summary>
      <returns>
            Array of bytes with Excel document - in case of converting successful.<br />
            null - in case of converting failed.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to Excel\Convert PDF to Excel workbook in memory\Sample.cs" title="How to convert PDF to Excel in memory using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to Excel\Convert PDF to Excel workbook in memory\Sample.vb" title="How to convert PDF to Excel in memory using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToXml(System.String,System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or diapason of pages to XML file
            </summary>
      <param name="fileName">Path to the XML file</param>
      <param name="fromPage">The starting page for exporting to XML</param>
      <param name="toPage">The ending page for exporting to XML</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToXml(System.Int32,System.Int32)">
      <summary>
            Saves a specific PDF page or diapason of pages to XML document and returns it as string
            </summary>
      <param name="fromPage">The starting page for exporting to XML</param>
      <param name="toPage">The ending page for exporting to XML</param>
      <returns>
            String with XML document - in case of converting successful.<br />
            null - in case of converting failed.
            </returns>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToXml(System.String)">
      <summary>
            Saves all pages of the PDF document to XML file
            </summary>
      <param name="fileName">Path to the XML file</param>
      <returns>
            0 - saving successfully<br />
            2 - can't create output file, check the output path<br />
            3 - saving failed, email to <a href="mailto:support@sautinsoft.com">support@sautinsoft.com</a></returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to XML\Convert PDF file to XML file\Sample.cs" title="How to convert PDF file to XML file using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to XML\Convert PDF file to XML file\Sample.vb" title="How to convert PDF file to XML file using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ToXml">
      <summary>
            Saves all pages of the PDF document into XML document and returns it as string
            </summary>
      <returns>
            String with XML document - in case of converting successful.<br />
            null - in case of converting failed.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\PDF to XML\Convert PDF to XML in memory\Sample.cs" title="How to convert PDF to XML in memory using C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\PDF to XML\Convert PDF to XML in memory\Sample.vb" title="How to convert PDF to XML in memory using VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ExtractImages(System.Int32,System.Int32)">
      <summary>
            Extract all images from PDF document from specific pages.
            </summary>
      <param name="from">The starting page for extracting images.</param>
      <param name="to">The ending page for extracting images.</param>
      <returns>
            List with <see cref="T:SautinSoft.PdfFocus.PdfImage">PdfImage</see> objects.<br />
            Null - in case of extraction failed.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\Extract Images from PDF\Extract all images from 1st PDF page\Sample.cs" title="Extract all images from 1st PDF page in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\Extract Images from PDF\Extract all images from 1st PDF page\Sample.vb" title="Extract all images from 1st PDF page in VB.Net">
        </code>
      </example>
    </member>
    <member name="M:SautinSoft.PdfFocus.ExtractImages">
      <summary>
            Extract all images from a whole PDF document.
            </summary>
      <returns>
            List with <see cref="T:SautinSoft.PdfFocus.PdfImage">PdfImage</see> objects.<br />
            Null - in case of extraction failed.
            </returns>
      <example>
        <code lang="cs" source="..\Packages\PDF Focus .Net\Code samples\CSharp\Extract Images from PDF\Extract all images and vector graphics from PDF\Sample.cs" title="Extract all images and vector graphics from PDF in C#">
        </code>
        <code lang="vbnet" source="..\Packages\PDF Focus .Net\Code samples\VB.Net\Extract Images from PDF\Extract all images and vector graphics from PDF\Sample.vb" title="Extract all images and vector graphics from PDF in VB.Net">
        </code>
      </example>
    </member>
    <!-- Badly formed XML comment ignored for member "T:SautinSoft.Document.Html.CharsetDetector" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadShortLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadUnsignedShortLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadCharLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadIntLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Html.RandomAccessFileOrArray.ReadUnsignedInt" -->
    <!-- Badly formed XML comment ignored for member "T:SautinSoft.Document.Pdf.Reader.CFFFont.Font" -->
    <!-- Badly formed XML comment ignored for member "T:SautinSoft.Document.Pdf.Reader.PdfArray" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfDictionary.Get(SautinSoft.Document.Pdf.Reader.PdfName)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfEncodings.ConvertToBytes(System.String,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfEncodings.ConvertToBytes(System.Char,System.String)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfEncodings.ConvertCmap(System.String,System.Byte[])" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfEncodings.ConvertCmap(System.String,System.Byte[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfName.CompareTo(SautinSoft.Document.Pdf.Reader.PdfName)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.Pdf.Reader.PdfNull.#ctor" -->
    <!-- Badly formed XML comment ignored for member "T:SautinSoft.Document.Pdf.Reader.PdfNumber" -->
    <!-- Badly formed XML comment ignored for member "P:SautinSoft.Document.Pdf.Reader.Vector.Length" -->
    <!-- Badly formed XML comment ignored for member "P:SautinSoft.Document.Pdf.Reader.Vector.LengthSquared" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.ByteBuffer.SetCacheSize(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadShortLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadUnsignedShortLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadCharLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadIntLE" -->
    <!-- Badly formed XML comment ignored for member "M:SautinSoft.Document.RandomAccessFileOrArray.ReadUnsignedInt" -->
    <!-- Badly formed XML comment ignored for member "P:sautinsoftlocal.IRange.Characters" -->
  </members>
</doc>